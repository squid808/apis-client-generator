// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace gShell.Cmdlets.{{ api.className }}{{% indent %}

using System;
using System.Collections.Generic;
using System.Management.Automation;

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using {{ api.versionNoDots }} = {{ api.module.name }};
using Data = {{ api.module.name }}.Data;

using gShell.dotNet.Utilities;
using gShell.dotNet.Utilities.OAuth2;
using g{{ api.className }} = gShell.dotNet.{{ api.className }};

/// <summary>
/// A PowerShell-ready wrapper for the {{ api.className }} api, as well as the resources and methods therein.
/// </summary>
public abstract class {{ api.className }}Base : OAuth2CmdletBase
{{% indent %}

#region Properties

/// <summary>
/// <para type="description">The domain against which this cmdlet should run.</para>
/// </summary>
[Parameter(Mandatory = false)]
[ValidateNotNullOrEmpty]
public string Domain { get; set; }

/// <summary>The gShell dotNet class wrapper base.</summary>
protected static g{{api.className }} mainBase { get; set; }
{% noblank %}
{% for resource in api.resources %}{% eol %}
/// <summary>An instance of the {{ resource.className }} gShell dotNet resource.</summary>
public {{ resource.className }} {{ resource.codeName }} { get; set; }{% endfor %}
{% endnoblank %}

/// <summary>Returns the api name and version in {name}:{version} format.</summary>
protected override string apiNameAndVersion { get { return mainBase.apiNameAndVersion; } }

/// <summary>Gets or sets the email account the gShell Service Account should impersonate.</summary>
protected static string gShellServiceAccount { get; set; }{% if api.isGdata %}

/// <summary>A collection of scopes for the {{ api.className }} api.</summary>
HashSet<string> Scopes = new HashSet<string> {
{% indent %}{% for authscope in api.authscopes %}{% literal authscope.value %},
{% endfor %}{% endindent %}};
{% endif %}
#endregion

#region Constructors
protected {{ api.className }}Base()
{{% indent %}
mainBase = new g{{api.className }}();
{% for resource in api.resources %}{% eol %}{{ resource.codeName }} = new {{ resource.className }}();{% endfor %}
{% endindent %}}
#endregion

#region PowerShell Methods
/// <summary>The gShell base implementation of the PowerShell BeginProcessing method.</summary>
/// <remarks>If a service account needs to be identified, it should be in a child class that overrides
/// and calls this method.</remarks>
protected override void BeginProcessing()
{
    var secrets = CheckForClientSecrets();
    if (secrets != null)
    {
        IEnumerable<string> scopes = EnsureScopesExist(Domain{% if api.isGdata %}, Scopes{% endif %});
        Domain = mainBase.BuildService(Authenticate(scopes, secrets, Domain), gShellServiceAccount).domain;

        GWriteProgress = new gWriteProgress(WriteProgress);
    }
    else
    {
        WriteError(new ErrorRecord(null, (new Exception(
            "Client Secrets must be set before running cmdlets. Run 'Get-Help "
            + "Set-gShellClientSecrets -online' for more information."))));
    }
}

/// <summary>The gShell base implementation of the PowerShell EndProcessing method.</summary>
/// <remarks>We need to reset the service account after every Cmdlet call to prevent the next
/// Cmdlet from inheriting it as well.</remarks>
protected override void EndProcessing()
{
    gShellServiceAccount = string.Empty;
}

/// <summary>The gShell base implementation of the PowerShell StopProcessing method.</summary>
/// <remarks>We need to reset the service account after every Cmdlet call to prevent the next
/// Cmdlet from inheriting it as well.</remarks>
protected override void StopProcessing()
{
    gShellServiceAccount = string.Empty;
}
#endregion

#region Authentication & Processing
/// <summary>Ensure the user, domain and client secret combination work with an authenticated user.</summary>
/// <param name="Scopes">The scopes that need to be passed through to the user authentication to Google.</param>
/// <param name="Secrets">The client secrets.`</param>
/// <param name="Domain">The domain for which this authentication is intended.</param>
/// <returns>The AuthenticatedUserInfo for the authenticated user.</returns>
protected override AuthenticatedUserInfo Authenticate(IEnumerable<string> Scopes, ClientSecrets Secrets, string Domain = null)
{
    return mainBase.Authenticate(apiNameAndVersion, Scopes, Secrets, Domain);
}
#endregion

#region Wrapped Methods
{% for resource in api.resources %}{% eol %}
{% call_template _gshell_cmdlet_wrappedMethods resource=resource %}
{% endfor %}
#endregion

{% endindent %}}
{% endindent %}}



namespace gShell.dotNet
{{% indent %}
using System;
using System.Collections.Generic;

using gShell.dotNet;
using gShell.dotNet.Utilities.OAuth2;

using {{ api.versionNoDots }} = {{ api.module.name }};
using Data = {{ api.module.name }}.Data;

/// <summary>The dotNet gShell version of the {{ api.wireName }} api.</summary>
public class {{ api.className }} : ServiceWrapper<{{ api.versionNoDots }}.{{ api.className }}Service>
{{% indent %}

protected override bool worksWithGmail { get { return {% if api.name = "admin" %}false{% else %}true{% endif %}; } }

{% noblank %}
{% filter block_comment %}
/// <summary>Creates a new {{ api.versionNoDots }}.{{ api.className }} service.</summary>{% eol %}
{% endfilter %}
{% filter block_comment %}
/// <param name="domain">The domain to which this service will be authenticated.</param>{% eol %}
{% endfilter %}
{% filter block_comment %}
/// <param name="authInfo">The authenticated AuthInfo for this user and domain.</param>{% eol %}
{% endfilter %}
{% filter block_comment %}
/// <param name="gShellServiceAccount">The optional email address the service account should impersonate.</param>{% eol %}
{% endfilter %}
{% endnoblank %}
protected override {{ api.versionNoDots }}.{{ api.className }}Service CreateNewService(string domain, AuthenticatedUserInfo authInfo, string gShellServiceAccount = null)
{
    return new {{ api.versionNoDots }}.{{ api.className }}Service(OAuth2Base.Get{% if api.isGdata %}Gdata{% endif %}Initializer(domain, authInfo{% if not api.isGdata %}, gShellServiceAccount{% endif %}));
}

/// <summary>Returns the api name and version in {name}:{version} format.</summary>
public override string apiNameAndVersion { get { return "{{ api.name }}:{{ api.versionNoDots }}"; } }
{% noblank %}
{% for resource in api.resources %}{% eol %}
/// <summary>Gets or sets the {{ resource.codeName }} resource class.</summary>
public {{ resource.className }} {{ resource.codeName }}{ get; set; }{% endfor %}
{% endnoblank %}

public {{ api.className }}()
{{% indent %}
{% for resource in api.resources %}{% eol %}{{ resource.codeName }} = new {{ resource.className }}();{% endfor %}
{% endindent %}}

{# RECURSE THROUGH RESOURCES HERE #}
{% for resource in api.resources %}{% eol %}{% call_template _gshell_dotnet_resource resource=resource %}{% eol %}{% endfor %}
{% endindent %}}
{% endindent %}}