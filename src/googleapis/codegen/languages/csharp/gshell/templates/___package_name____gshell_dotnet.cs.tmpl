namespace gShell.Cmdlets.{{ api.className }}{{% indent %}

using System;
using System.Collections.Generic;
using System.Management.Automation;

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using {{ api.versionNoDots }} = {{ api.module.name }};
using Data = {{ api.module.name }}.Data;

using gShell.dotNet.Utilities;
using gShell.dotNet.Utilities.OAuth2;
using g{{ api.className }} = gShell.dotNet.{{ api.className }};

public abstract class {{ api.className }}Base : OAuth2CmdletBase
{{% indent %}

#region Properties
[Parameter(Mandatory = false)]
[ValidateNotNullOrEmpty]
public string Domain { get; set; }

protected static g{{api.className }} mainBase { get; set; }
{% noblank %}
{% for resource in api.resources %}{% eol %}public {{ resource.className }} {{ resource.codeName }} { get; set; }{% endfor %}
{% endnoblank %}

protected override string apiNameAndVersion { get { return mainBase.apiNameAndVersion; } }
#endregion

#region Constructors
public {{ api.className }}Base()
{{% indent %}
{% for resource in api.resources %}{% eol %}{{ resource.codeName }} = new {{ resource.className }}();{% endfor %}
{% endindent %}}
#endregion

#region PowerShell Methods
protected override void BeginProcessing()
{
    var secrets = CheckForClientSecrets();
    if (secrets != null)
    {
        IEnumerable<string> scopes = EnsureScopesExist(Domain);
        Domain = mainBase.BuildService(Authenticate(scopes, secrets, Domain)).domain;

        GWriteProgress = new gWriteProgress(WriteProgress);
    }
    else
    {
        WriteError(new ErrorRecord(null, (new Exception(
            "Client Secrets must be set before running cmdlets. Run 'Get-Help "
            + "Set-gShellClientSecrets -online' for more information."))));
    }
}
#endregion

#region Authentication & Processing
protected override AuthenticatedUserInfo Authenticate(IEnumerable<string> Scopes, ClientSecrets Secrets, string Domain = null)
{
    return mainBase.Authenticate(apiNameAndVersion, Scopes, Secrets, Domain);
}
#endregion

#region Wrapped Methods
{% for resource in api.resources %}{% eol %}
{% call_template _gshell_cmdlet_wrappedMethods resource=resource %}
{% endfor %}
#endregion

{% endindent %}}
{% endindent %}}



namespace gShell.dotNet
{{% indent %}
using System;
using System.Collections.Generic;

using gShell.dotNet;
using gShell.dotNet.Utilities.OAuth2;

using {{ api.versionNoDots }} = {{ api.module.name }};
using Data = {{ api.module.name }}.Data;

public class {{ api.className }} : ServiceWrapper<{{ api.versionNoDots }}.{{ api.className }}Service>
{{% indent %}

protected override bool worksWithGmail { get { return {% if api.name = "admin" %}false{% else %}true{% endif %}; } }

protected override {{ api.versionNoDots }}.{{ api.className }}Service CreateNewService(string domain)
{
    return new {{ api.versionNoDots }}.{{ api.className }}Service(OAuth2Base.GetInitializer(domain));
}

public override string apiNameAndVersion { get { return "{{ api.name }}:{{ api.versionNoDots }}"; } }
{% noblank %}
{% for resource in api.resources %}{% eol %}public {{ resource.className }} {{ resource.codeName }}{ get; set; }{% endfor %}
{% endnoblank %}

public {{ api.className }}() //public Reports()
{{% indent %}
{% for resource in api.resources %}{% eol %}{{ resource.codeName }} = new {{ resource.className }}();{% endfor %}
{% endindent %}}

{# RECURSE THROUGH RESOURCES HERE #}
{% for resource in api.resources %}{% eol %}{% call_template _gshell_dotnet_resource resource=resource %}{% eol %}{% endfor %}
{% endindent %}}
{% endindent %}}